%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2  

imu_topic: "$imu_topic"
image0_topic: "$image0_topic"
image1_topic: "$image1_topic"
output_path: "/home/output"

cam0_calib: "cam0_mei.yaml"
cam1_calib: "cam1_mei.yaml"
image_width: $image_width
image_height: $image_height
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: $estimate_extrinsic   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: $body_T_cam0

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: $body_T_cam1
#Multiple thread support
multiple_thread: 1



#feature traker paprameters
max_cnt: $max_cnt            # max feature number in feature tracking
min_dist: $min_dist          # min distance between two features 
freq: $freq                  # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: $F_threshold    # ransac threshold (pixel)
show_track: $show_track      # publish tracking image as topic
flow_back: $flow_back        # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: $max_solver_time         # max solver itration time (ms), to guarantee real time
max_num_iterations: $max_num_iterations   # max solver itrations, to guarantee real time
keyframe_parallax: $keyframe_parallax

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: $acc_n         # accelerometer measurement noise standard deviation. 
gyr_n: $gyr_n         # gyroscope measurement noise standard deviation.     
acc_w: $acc_w         # accelerometer bias random work noise standard deviation.  
gyr_w: $gyr_w         # gyroscope bias random work noise standard deviation.     
g_norm: $g_norm       # gravity magnitude

#unsynchronization parameters
estimate_td: $estimate_td    # online estimate time offset between camera and imu
td: $td                      # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

